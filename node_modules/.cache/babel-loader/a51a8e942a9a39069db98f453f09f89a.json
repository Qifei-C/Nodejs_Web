{"ast":null,"code":"import _toConsumableArray from \"/Users/qifei/qifei-port/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/qifei/qifei-port/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/qifei/qifei-port/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/qifei/qifei-port/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport var OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        ownerDocument = _ref.ownerDocument,\n        _ref$handleContainerO = _ref.handleContainerOverflow,\n        handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO,\n        _ref$isRTL = _ref.isRTL,\n        isRTL = _ref$isRTL === void 0 ? false : _ref$isRTL;\n\n    _classCallCheck(this, ModalManager);\n\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  _createClass(ModalManager, [{\n    key: \"getScrollbarWidth\",\n    value: function getScrollbarWidth() {\n      return getBodyScrollbarWidth(this.ownerDocument);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement() {\n      return (this.ownerDocument || document).body;\n    }\n  }, {\n    key: \"setModalAttributes\",\n    value: function setModalAttributes(_modal) {// For overriding\n    }\n  }, {\n    key: \"removeModalAttributes\",\n    value: function removeModalAttributes(_modal) {// For overriding\n    }\n  }, {\n    key: \"setContainerStyle\",\n    value: function setContainerStyle(containerState) {\n      var style = {\n        overflow: 'hidden'\n      }; // we are only interested in the actual `style` here\n      // because we will override it\n\n      var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n      var container = this.getElement();\n      containerState.style = _defineProperty({\n        overflow: container.style.overflow\n      }, paddingProp, container.style[paddingProp]);\n\n      if (containerState.scrollBarWidth) {\n        // use computed style, here to get the real padding\n        // to add our scrollbar width\n        style[paddingProp] = \"\".concat(parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth, \"px\");\n      }\n\n      container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n      css(container, style);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      _toConsumableArray(this.modals).forEach(function (m) {\n        return _this.remove(m);\n      });\n    }\n  }, {\n    key: \"removeContainerStyle\",\n    value: function removeContainerStyle(containerState) {\n      var container = this.getElement();\n      container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n      Object.assign(container.style, containerState.style);\n    }\n  }, {\n    key: \"add\",\n    value: function add(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n\n      if (modalIdx !== -1) {\n        return modalIdx;\n      }\n\n      modalIdx = this.modals.length;\n      this.modals.push(modal);\n      this.setModalAttributes(modal);\n\n      if (modalIdx !== 0) {\n        return modalIdx;\n      }\n\n      this.state = {\n        scrollBarWidth: this.getScrollbarWidth(),\n        style: {}\n      };\n\n      if (this.handleContainerOverflow) {\n        this.setContainerStyle(this.state);\n      }\n\n      return modalIdx;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n\n      if (modalIdx === -1) {\n        return;\n      }\n\n      this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n      // clean up the container\n\n      if (!this.modals.length && this.handleContainerOverflow) {\n        this.removeContainerStyle(this.state);\n      }\n\n      this.removeModalAttributes(modal);\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n\n  return ModalManager;\n}();\n\nexport default ModalManager;","map":{"version":3,"names":["css","dataAttr","getBodyScrollbarWidth","OPEN_DATA_ATTRIBUTE","ModalManager","ownerDocument","handleContainerOverflow","isRTL","modals","document","body","_modal","containerState","style","overflow","paddingProp","container","getElement","scrollBarWidth","parseInt","setAttribute","forEach","m","remove","removeAttribute","Object","assign","modal","modalIdx","indexOf","length","push","setModalAttributes","state","getScrollbarWidth","setContainerStyle","splice","removeContainerStyle","removeModalAttributes"],"sources":["/Users/qifei/qifei-port/node_modules/@restart/ui/esm/ModalManager.js"],"sourcesContent":["import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nclass ModalManager {\n  constructor({\n    ownerDocument,\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n\n  setModalAttributes(_modal) {// For overriding\n  }\n\n  removeModalAttributes(_modal) {// For overriding\n  }\n\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n\n    return modalIdx;\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n\n    this.removeModalAttributes(modal);\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,qBAAP,MAAkC,qBAAlC;AACA,OAAO,IAAMC,mBAAmB,GAAGF,QAAQ,CAAC,YAAD,CAApC;AACP;AACA;AACA;AACA;;IAEMG,Y;EACJ,wBAIQ;IAAA,+EAAJ,EAAI;IAAA,IAHNC,aAGM,QAHNA,aAGM;IAAA,iCAFNC,uBAEM;IAAA,IAFNA,uBAEM,sCAFoB,IAEpB;IAAA,sBADNC,KACM;IAAA,IADNA,KACM,2BADE,KACF;;IAAA;;IACN,KAAKD,uBAAL,GAA+BA,uBAA/B;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKH,aAAL,GAAqBA,aAArB;EACD;;;;WAED,6BAAoB;MAClB,OAAOH,qBAAqB,CAAC,KAAKG,aAAN,CAA5B;IACD;;;WAED,sBAAa;MACX,OAAO,CAAC,KAAKA,aAAL,IAAsBI,QAAvB,EAAiCC,IAAxC;IACD;;;WAED,4BAAmBC,MAAnB,EAA2B,CAAC;IAC3B;;;WAED,+BAAsBA,MAAtB,EAA8B,CAAC;IAC9B;;;WAED,2BAAkBC,cAAlB,EAAkC;MAChC,IAAMC,KAAK,GAAG;QACZC,QAAQ,EAAE;MADE,CAAd,CADgC,CAG7B;MACH;;MAEA,IAAMC,WAAW,GAAG,KAAKR,KAAL,GAAa,aAAb,GAA6B,cAAjD;MACA,IAAMS,SAAS,GAAG,KAAKC,UAAL,EAAlB;MACAL,cAAc,CAACC,KAAf;QACEC,QAAQ,EAAEE,SAAS,CAACH,KAAV,CAAgBC;MAD5B,GAEGC,WAFH,EAEiBC,SAAS,CAACH,KAAV,CAAgBE,WAAhB,CAFjB;;MAKA,IAAIH,cAAc,CAACM,cAAnB,EAAmC;QACjC;QACA;QACAL,KAAK,CAACE,WAAD,CAAL,aAAwBI,QAAQ,CAACnB,GAAG,CAACgB,SAAD,EAAYD,WAAZ,CAAH,IAA+B,GAAhC,EAAqC,EAArC,CAAR,GAAmDH,cAAc,CAACM,cAA1F;MACD;;MAEDF,SAAS,CAACI,YAAV,CAAuBjB,mBAAvB,EAA4C,EAA5C;MACAH,GAAG,CAACgB,SAAD,EAAYH,KAAZ,CAAH;IACD;;;WAED,iBAAQ;MAAA;;MACN,mBAAI,KAAKL,MAAT,EAAiBa,OAAjB,CAAyB,UAAAC,CAAC;QAAA,OAAI,KAAI,CAACC,MAAL,CAAYD,CAAZ,CAAJ;MAAA,CAA1B;IACD;;;WAED,8BAAqBV,cAArB,EAAqC;MACnC,IAAMI,SAAS,GAAG,KAAKC,UAAL,EAAlB;MACAD,SAAS,CAACQ,eAAV,CAA0BrB,mBAA1B;MACAsB,MAAM,CAACC,MAAP,CAAcV,SAAS,CAACH,KAAxB,EAA+BD,cAAc,CAACC,KAA9C;IACD;;;WAED,aAAIc,KAAJ,EAAW;MACT,IAAIC,QAAQ,GAAG,KAAKpB,MAAL,CAAYqB,OAAZ,CAAoBF,KAApB,CAAf;;MAEA,IAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;QACnB,OAAOA,QAAP;MACD;;MAEDA,QAAQ,GAAG,KAAKpB,MAAL,CAAYsB,MAAvB;MACA,KAAKtB,MAAL,CAAYuB,IAAZ,CAAiBJ,KAAjB;MACA,KAAKK,kBAAL,CAAwBL,KAAxB;;MAEA,IAAIC,QAAQ,KAAK,CAAjB,EAAoB;QAClB,OAAOA,QAAP;MACD;;MAED,KAAKK,KAAL,GAAa;QACXf,cAAc,EAAE,KAAKgB,iBAAL,EADL;QAEXrB,KAAK,EAAE;MAFI,CAAb;;MAKA,IAAI,KAAKP,uBAAT,EAAkC;QAChC,KAAK6B,iBAAL,CAAuB,KAAKF,KAA5B;MACD;;MAED,OAAOL,QAAP;IACD;;;WAED,gBAAOD,KAAP,EAAc;MACZ,IAAMC,QAAQ,GAAG,KAAKpB,MAAL,CAAYqB,OAAZ,CAAoBF,KAApB,CAAjB;;MAEA,IAAIC,QAAQ,KAAK,CAAC,CAAlB,EAAqB;QACnB;MACD;;MAED,KAAKpB,MAAL,CAAY4B,MAAZ,CAAmBR,QAAnB,EAA6B,CAA7B,EAPY,CAOqB;MACjC;;MAEA,IAAI,CAAC,KAAKpB,MAAL,CAAYsB,MAAb,IAAuB,KAAKxB,uBAAhC,EAAyD;QACvD,KAAK+B,oBAAL,CAA0B,KAAKJ,KAA/B;MACD;;MAED,KAAKK,qBAAL,CAA2BX,KAA3B;IACD;;;WAED,oBAAWA,KAAX,EAAkB;MAChB,OAAO,CAAC,CAAC,KAAKnB,MAAL,CAAYsB,MAAd,IAAwB,KAAKtB,MAAL,CAAY,KAAKA,MAAL,CAAYsB,MAAZ,GAAqB,CAAjC,MAAwCH,KAAvE;IACD;;;;;;AAIH,eAAevB,YAAf"},"metadata":{},"sourceType":"module"}